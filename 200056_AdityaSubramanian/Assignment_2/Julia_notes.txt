Variables and types:
- Tree like structure, Any: Number and others, Number has real and complex, Real has int and float and so on
- Any function working on a type works on its subtype
- typeof() returns type
- convert(type_name, data) converts data to type of type_name

Functions:
- definition is as follows
funtion <function_name>(<arguments_list>)
    <body>
    return <parameters>
end
- inline funcitons look like this
function_name(arguments_list) = function_body
  example:
f(x,y,z) = (4x+y^2)*z
- anonymous funcitons look like
function_name = arguments_list -> function_body
  example
plus_two = x -> x+2
- can have default arguments but they need to be in order
- if we want default arguments but not in order then during the funciton definition we add ';' inside the parameters list, all arguments after the ';' mark will have to be passed with the variable name but now they can be in any order. This is called keyword arguments
- typing '? function_name' in the terminal will give the funciton documentation if any. We can add documentation to a function by adding the following before defining a function:
"""
documentation
"""
function...
    ...
end

Data Structures:
- vectors:
    defn: a = ["hey","it's","me","Aditya"]
    index starts at 1 not 0
    if we want to make a copy of an array then we've to use the copy function, c = copy(a) .If we do c=a then c will be the pointer to the array a
    adding elements: append!(a,"!"), after appending a will become ["hey","it's","me","Aditya","!"]
- matrix:
    rows seperated by ';' columns seperated by space
- n dimensional vector:
    defined using keyword zeros
    use: table = zeros(n,m,l)
    accessing elements is as table[i, j, k] not table[i][j][k]
    prefer to keep smaller index lenghts first, so ideally n<m<l
- slices:
    we can get a subpart of a n-dimensional vector as mat2 = b[indexn1:indexn2, indexm1,indexm2]
- tuple:
    same concept as in c++
    using this we can return multiple values from Functions
    no special syntax
- dictionary:
    key and value pair

Control Flow: